"""
описание изменений

Revision ID: 15b6c1a8c4c3
Revises: 05285ed603d5
Create Date: 2025-04-04 00:16:46.443590

"""
from collections.abc import Sequence

import sqlalchemy as sa
import sqlmodel.sql.sqltypes
from alembic import op

# revision identifiers, used by Alembic.
revision: str = '15b6c1a8c4c3'
down_revision: str | None = '05285ed603d5'
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


if not sqlmodel.sql:
    raise Exception('Something went wrong')


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('attendance', schema=None) as batch_op:
        batch_op.drop_index('idx_attendance_date')
        batch_op.drop_index('idx_attendance_schedule')

    op.drop_table('attendance')
    op.drop_table('groups_users')
    op.drop_table('groups')
    op.drop_table('__EFMigrationsHistory')
    op.drop_table('roles')
    op.drop_table('schedule')
    op.drop_table('subjects')
    op.drop_table('users')
    with op.batch_alter_table('bil_nebil', schema=None) as batch_op:
        batch_op.drop_index('idx_bil_nebil_user')

    op.drop_table('bil_nebil')
    op.drop_table('types')
    op.drop_table('cabinets')
    op.drop_table('types_subjects')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('types_subjects',
    sa.Column('types_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('subjects_idsubjects', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['subjects_idsubjects'], ['subjects.idsubjects'], name='idsubject_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['types_id'], ['types.id'], name='types_subjects_types_id_fkey'),
    sa.PrimaryKeyConstraint('types_id', 'subjects_idsubjects', name='types_subjects_pkey')
    )
    op.create_table('cabinets',
    sa.Column('idcabinet', sa.INTEGER(), server_default=sa.text("nextval('cabinets_idcabinet_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('description', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('idcabinet', name='cabinets_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('types',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('type', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='types_pkey')
    )
    op.create_table('bil_nebil',
    sa.Column('idattendance', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('iduser', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['idattendance'], ['attendance.idattendance'], name='bil_attendance_idattendance'),
    sa.PrimaryKeyConstraint('idattendance', 'iduser', name='bil_nebil_pkey')
    )
    with op.batch_alter_table('bil_nebil', schema=None) as batch_op:
        batch_op.create_index('idx_bil_nebil_user', ['iduser'], unique=False)

    op.create_table('users',
    sa.Column('idusers', sa.INTEGER(), server_default=sa.text("nextval('users_idusers_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('surname', sa.VARCHAR(length=45), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=45), autoincrement=False, nullable=False),
    sa.Column('paternity', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('birthdate', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('login', sa.VARCHAR(length=25), autoincrement=False, nullable=False),
    sa.Column('password', sa.VARCHAR(length=25), autoincrement=False, nullable=True),
    sa.Column('roles_idroles', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['roles_idroles'], ['roles.idroles'], name='users_roles_idroles_fkey'),
    sa.PrimaryKeyConstraint('idusers', name='users_pkey'),
    sa.UniqueConstraint('idusers', name='users_idusers_key'),
    sa.UniqueConstraint('login', name='users_login_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('subjects',
    sa.Column('idsubjects', sa.INTEGER(), server_default=sa.text("nextval('subjects_idsubjects_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=45), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(length=150), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('idsubjects', name='subjects_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('schedule',
    sa.Column('idschedule', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('time', postgresql.TIME(), autoincrement=False, nullable=False),
    sa.Column('subjects_idsubjects', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('users_idusers', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('cabinets_idcabinet', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('groups_idgroup', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('day_of_week', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['cabinets_idcabinet'], ['cabinets.idcabinet'], name='schedule_cabinets_idcabinet_fkey'),
    sa.ForeignKeyConstraint(['groups_idgroup'], ['groups.idgroups'], name='schedule_group_idgroup_fkey'),
    sa.ForeignKeyConstraint(['subjects_idsubjects'], ['subjects.idsubjects'], name='schedule_subjects_idsubjects_fkey'),
    sa.ForeignKeyConstraint(['users_idusers'], ['users.idusers'], name='schedule_users_idusers_fkey'),
    sa.PrimaryKeyConstraint('idschedule', name='schedule_pk'),
    postgresql_ignore_search_path=False
    )
    op.create_table('roles',
    sa.Column('idroles', sa.INTEGER(), server_default=sa.text("nextval('roles_idroles_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=25), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('idroles', name='roles_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('__EFMigrationsHistory',
    sa.Column('MigrationId', sa.VARCHAR(length=150), autoincrement=False, nullable=False),
    sa.Column('ProductVersion', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('MigrationId', name='PK___EFMigrationsHistory')
    )
    op.create_table('groups',
    sa.Column('idgroups', sa.INTEGER(), server_default=sa.text("nextval('groups_idgroups_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('idgroups', name='groups_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('groups_users',
    sa.Column('groups_idgroups', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('users_idusers', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.ForeignKeyConstraint(['groups_idgroups'], ['groups.idgroups'], name='groups_users_groups_idgroups_fkey'),
    sa.ForeignKeyConstraint(['users_idusers'], ['users.idusers'], name='groups_users_users_idusers_fkey'),
    sa.PrimaryKeyConstraint('groups_idgroups', 'users_idusers', name='groups_users_pkey')
    )
    op.create_table('attendance',
    sa.Column('idattendance', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('idschedule', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['idschedule'], ['schedule.idschedule'], name='attendance_schedule_idschedule'),
    sa.PrimaryKeyConstraint('idattendance', name='attendance_pkey')
    )
    with op.batch_alter_table('attendance', schema=None) as batch_op:
        batch_op.create_index('idx_attendance_schedule', ['idschedule'], unique=False)
        batch_op.create_index('idx_attendance_date', ['date'], unique=False)

    # ### end Alembic commands ###
