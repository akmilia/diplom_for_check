
#очень интересно, но нафиг оно надо - это админка, которой тут нет
# @router.post('/subjects', response_model=SubjectSchema, dependencies=[Depends(admin)])
# async def create_subject(
#     session: AsyncSession,
#     subject_data: SubjectCreateSchema
# ):
#     # Создаем новый предмет
#     new_subject = Subjects(
#         name=subject_data.name,
#         description=subject_data.description
#     )
#     session.add(new_subject)
#     await session.commit()
#     await session.refresh(new_subject)
    
#     # Создаем связь с типом
#     for type_id in subject_data.type_ids:
#         type_subject = TypesSubjects(
#             types_id=type_id,
#             subjects_idsubjects=new_subject.idsubjects
#         )
#         session.add(type_subject)
    
#     await session.commit()
   
#     # Получаем созданный предмет из представления
#     created_subject = (await session.execute(
#         select(SubjectSchema)
#         .where(SubjectSchema.id == new_subject.idsubjects)
#     )).scalar_one_or_none()
    
#     if not created_subject:
#         raise HTTPException(status_code=500, detail='Ошибка при создании предмета')
  
#     return created_subject

# @router.get('/schedule', response_model=list[ScheduleEntryResponse])
# async def get_schedule(
#     session: AsyncSession,
#     day_of_week: str,
#     group_id: Optional[int] = None  # type: ignore
# ):
#     # Базовый запрос с загрузкой связанных данных
#     query = (
#         select(Schedule)
#         .options(
#             joinedload(Schedule.subjects),
#             joinedload(Schedule.users),
#             joinedload(Schedule.cabinets),
#             joinedload(Schedule.groups),
#             joinedload(Schedule.attendance)
#         )
#     )
    
#     # Применяем фильтры
#     if day_of_week:
#         query = query.where(Schedule.day_of_week == day_of_week)
#     if group_id:
#         query = query.where(Schedule.groups_idgroup == group_id)
    
#     # Выполняем запрос
#     schedules = (await session.execute(query)).unique().scalars().all()
    
#     if not schedules:
#         raise HTTPException(status_code=404, detail='Расписание не найдено')
    
#     # Преобразуем в ответ
#     result = []
#     for schedule in schedules:
#         # Получаем даты занятий из Attendance
#         dates = [a.date.strftime("%d.%m.%Y") for a in schedule.attendance]
        
#         # Преобразуем день недели из числа в текст
#         day_names = {
#             1: "Понедельник",
#             2: "Вторник",
#             3: "Среда",
#             4: "Четверг",
#             5: "Пятница",
#             6: "Суббота"
#         }
        
#         result.append(ScheduleEntryResponse(
#             idschedule=schedule.idschedule,
#             time=schedule.time.strftime("%H:%M"),
#             subject_name=schedule.subjects.name,
#             teacher=ScheduleTeacherSchema(
#                 id=schedule.users.idusers,
#                 surname=schedule.users.surname,
#                 name=schedule.users.name,
#                 paternity=schedule.users.paternity
#             ),
#             cabinet=schedule.cabinets.idcabinet,  # или schedule.cabinets.name, если есть название
#             group_name=schedule.groups.name if schedule.groups else None,
#             day_of_week=day_names.get(schedule.day_of_week, "Неизвестно"),
#             dates=dates
#         ))
    
#     return result 



# @router.get('/subjects', response_model=list[Subject], dependencies=[Depends(admin)])
# async def get_subjects(session: AsyncSessionDep):
#     return (await session.execute(select(Subject))).scalars().all()


# @router.post('/subjects', response_model=Subject, dependencies=[Depends(admin)])
# async def create_subject(session: AsyncSessionDep, subject_schema: SubjectSchema):
#     subject = Subject(
#         name=subject_schema.name,
#         description=subject_schema.description,
#         type=subject_schema.type,
#     )
#     session.add(subject)
#     await session.commit()
#     await session.refresh(subject)
#     return subject 



# @router.post('/login', response_model=BearerSchema)
# async def login(session: AsyncSessionDep, login_data: LoginSchema):
#     user = (
#         await session.execute(
#             select(User)
#             .where(User.login == login_data.login)
#             .where(User.password == login_data.password)
#         )
#     ).scalar_one_or_none()

#     if not user or not user.id:
#         raise HTTPException(status_code=404, detail='User not found')

#     role = (await session.execute(select(Role).where(Role.id == user.role_id))).scalar_one()

#     user_session = SessionSchema(role=role.name, user_id=user.id)
#     encoded_jwt = str(encode(user_session.model_dump(), SECRET_KEY, algorithm=ALGORITHM))

#     return BearerSchema(access_token=encoded_jwt, role=role.name)


# @router.get('/profile', response_model=Users, dependencies=[Depends(user_auth)])
# async def get_profile(user: Annotated[User, Depends(user_auth)]):
#     return user

====================================================================================

# @auth_router.post('/login', response_model=BearerSchema)
# async def login(
#     session: AsyncSession = Depends(get_session),
#     login_data: LoginSchema = Depends()
# ):
#     # Ищем пользователя по логину и паролю
#     user = (await session.execute(
#         select(Users)
#         .where(Users.login == login_data.login)
#         .where(Users.password == login_data.password)
#     )).scalar_one_or_none()

#     if not user:
#         raise HTTPException(status_code=404, detail='Пользователь не найден')

#     # Получаем роль пользователя
#     role = (await session.execute(
#         select(Roles).where(Roles.idroles == user.roles_idroles)
#     )).scalar_one()

#     # Генерируем токен (ваша текущая реализация)
#     encoded_jwt = str(encode(
#         {"role": role.name, "user_id": user.idusers},
#         SECRET_KEY,
#         algorithm=ALGORITHM
#     ))

#     return BearerSchema(
#         access_token=encoded_jwt,
#         role=role.name
#     )

# @common_router.get('/users', response_model=list[Users])
# async def get_users(session: AsyncSession = Depends(get_session)):
#     return (await session.execute(select(Users))).scalars().all()

# @common_router.post('/users', response_model=Users)
# async def create_user(session: AsyncSession = Depends(get_session), user: UserCreateSchema = Depends()):
#     u = Users(
#         surname=user.surname,
#         name=user.name,
#         paternity=user.paternity,
#         birthdate=user.birthdate,
#         login=user.login,
#         password=user.password,
#         roles_idroles=user.role_id,  # Исправлено: roles_idroles вместо role_id
#     )
#     session.add(u)
#     await session.commit()
#     await session.refresh(u)
#     return u

# @common_router.get('/teachers', response_model=list[Users])
# async def get_teachers(session: AsyncSession = Depends(get_session)):
#     return (await session.execute(select(Users).where(Users.roles_idroles == 2))).scalars().all()

# @common_router.get('/subjects', response_model=list[SubjectSchema])
# async def get_subjects(session: AsyncSession = Depends(get_session)):
#     # Получаем все предметы из представления
#     subjects = (await session.execute(
#         select(t_subjectsshow)
#     )).scalars().all()

#     if not subjects:
#         raise HTTPException(status_code=404, detail='Предметы не найдены')

#     return subjects

# @common_router.get('/schedule', response_model=list[ScheduleEntrySchema])
# async def get_schedule(
#     session: AsyncSession = Depends(get_session),
#     day_of_week: str,
#     group_id: int | None
# ):
#     # Базовый запрос к представлению
#     query = select(t_scheduleshow)

#     # Применяем фильтры
#     if day_of_week:
#         query = query.where(t_scheduleshow.c.day_of_week == day_of_week)
#     if group_id:
#         query = query.where(t_scheduleshow.c.group_nam == str(group_id))

#     # Выполняем запрос
#     result = (await session.execute(query)).all()

#     if not result:
#         raise HTTPException(status_code=404, detail='Расписание не найдено')

#     # Форматируем ответ
#     return [
#         ScheduleEntrySchema(
#             idschedule=row.idschedule,
#             time=row.time.strftime("%H:%M"),
#             subject_name=row.subject_name,
#             teacher=ScheduleTeacherSchema.from_string(row.teacher),
#             cabinet=str(row.cabinet),
#             group_name=row.group_nam,
#             day_of_week=row.day_of_week
#         )
#         for row in result
#     ]

# @common_router.get('/schedule/days', response_model=dict[str, list[ScheduleEntrySchema]])
# async def get_schedule_by_days(
#     session: AsyncSession = Depends(get_session),
#     group_id: int | None
# ) -> dict[str, list[ScheduleEntrySchema]]:  # Явное указание типа возвращаемого значения
#     days = ["Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота"]
#     result: dict[str, list[ScheduleEntrySchema]] = {}  # Явная аннотация типа

#     for day in days:
#         schedules = await get_schedule(session, day_of_week=day, group_id=group_id)
#         if schedules:
#             result[day] = schedules

#     return result

# @common_router.get('/schedule/{schedule_id}/dates', response_model=list[str])
# async def get_schedule_dates(
#     schedule_id: int,
#     session: AsyncSession = Depends(get_session)
# ):
#     dates = (await session.execute(
#         select(Attendance.date)
#         .where(Attendance.idschedule == schedule_id)
#         .order_by(Attendance.date)
#     )).scalars().all()

#     return [date.strftime("%d.%m.%Y") for date in dates]

# Регистрация роутеров