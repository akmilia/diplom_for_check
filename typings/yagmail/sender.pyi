"""
This type stub file was generated by pyright.
"""

class SMTP:
    """ :class:`yagmail.SMTP` is a magic wrapper around
    ``smtplib``'s SMTP connection, and allows messages to be sent."""
    def __init__(self, user=..., password=..., host=..., port=..., smtp_starttls=..., smtp_ssl=..., smtp_set_debuglevel=..., smtp_skip_login=..., encoding=..., oauth2_file=..., soft_email_validation=..., dkim=..., **kwargs) -> None:
        ...
    
    def __enter__(self): # -> Self:
        ...
    
    def __exit__(self, exc_type, exc_val, exc_tb): # -> Literal[False]:
        ...
    
    @property
    def connection(self): # -> type[SMTP_SSL] | type[SMTP]:
        ...
    
    @property
    def starttls(self): # -> bool:
        ...
    
    def set_logging(self, log_level=..., file_path_name=...): # -> None:
        """
        This function allows to change the logging backend, either output or file as backend
        It also allows to set the logging level (whether to display only critical/error/info/debug.
        for example::

            yag = yagmail.SMTP()
            yag.set_logging(yagmail.logging.DEBUG)  # to see everything

        and::

            yagmail.set_logging(yagmail.logging.DEBUG, 'somelocalfile.log')

        lastly, a log_level of :py:class:`None` will make sure there is no I/O.
        """
        ...
    
    def prepare_send(self, to=..., subject=..., contents=..., attachments=..., cc=..., bcc=..., headers=..., prettify_html=..., message_id=..., group_messages=...): # -> tuple[list[Any], Any]:
        ...
    
    def send(self, to=..., subject=..., contents=..., attachments=..., cc=..., bcc=..., preview_only=..., headers=..., prettify_html=..., message_id=..., group_messages=...): # -> tuple[list[Any], Any] | _SendErrs | Literal[False]:
        """ Use this to send an email with gmail"""
        ...
    
    def send_unsent(self): # -> None:
        """
        Emails that were not being able to send will be stored in :attr:`self.unsent`.
        Use this function to attempt to send these again
        """
        ...
    
    def close(self): # -> None:
        """ Close the connection to the SMTP server """
        ...
    
    def login(self): # -> None:
        ...
    
    @staticmethod
    def handle_password(user, password): # -> str:
        ...
    
    @staticmethod
    def get_oauth_string(user, oauth2_info): # -> str | LiteralString:
        ...
    
    def feedback(self, message=...): # -> None:
        """ Most important function. Please send me feedback :-) """
        ...
    
    def __del__(self): # -> None:
        ...
    


